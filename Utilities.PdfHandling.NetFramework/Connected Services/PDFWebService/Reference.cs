//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PDFWebService
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FileItem", Namespace="http://schemas.datacontract.org/2004/07/UC.PdfServices.Wcf")]
    internal partial class FileItem : object
    {
        
        private byte[] DataField;
        
        private string FileNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal byte[] Data
        {
            get
            {
                return this.DataField;
            }
            set
            {
                this.DataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal string FileName
        {
            get
            {
                return this.FileNameField;
            }
            set
            {
                this.FileNameField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PageOrientation", Namespace="http://schemas.datacontract.org/2004/07/UC.PdfServices.Entities.Models")]
    internal enum PageOrientation : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Portrait = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Landscape = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PDFWebService.IPdfService")]
    internal interface IPdfService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPdfService/ConvertFileIntoOnePdf", ReplyAction="http://tempuri.org/IPdfService/ConvertFileIntoOnePdfResponse")]
        PDFWebService.FileItem ConvertFileIntoOnePdf(PDFWebService.FileItem file);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPdfService/ConvertFileIntoOnePdf", ReplyAction="http://tempuri.org/IPdfService/ConvertFileIntoOnePdfResponse")]
        System.Threading.Tasks.Task<PDFWebService.FileItem> ConvertFileIntoOnePdfAsync(PDFWebService.FileItem file);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPdfService/CombineFilesIntoOnePdf", ReplyAction="http://tempuri.org/IPdfService/CombineFilesIntoOnePdfResponse")]
        PDFWebService.FileItem CombineFilesIntoOnePdf(System.Collections.Generic.List<PDFWebService.FileItem> files);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPdfService/CombineFilesIntoOnePdf", ReplyAction="http://tempuri.org/IPdfService/CombineFilesIntoOnePdfResponse")]
        System.Threading.Tasks.Task<PDFWebService.FileItem> CombineFilesIntoOnePdfAsync(System.Collections.Generic.List<PDFWebService.FileItem> files);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPdfService/GetPdfFromUrl", ReplyAction="http://tempuri.org/IPdfService/GetPdfFromUrlResponse")]
        PDFWebService.FileItem GetPdfFromUrl(string url, PDFWebService.PageOrientation orientation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPdfService/GetPdfFromUrl", ReplyAction="http://tempuri.org/IPdfService/GetPdfFromUrlResponse")]
        System.Threading.Tasks.Task<PDFWebService.FileItem> GetPdfFromUrlAsync(string url, PDFWebService.PageOrientation orientation);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    internal interface IPdfServiceChannel : PDFWebService.IPdfService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    internal partial class PdfServiceClient : System.ServiceModel.ClientBase<PDFWebService.IPdfService>, PDFWebService.IPdfService
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public PdfServiceClient() : 
                base(PdfServiceClient.GetDefaultBinding(), PdfServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IPdfService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PdfServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(PdfServiceClient.GetBindingForEndpoint(endpointConfiguration), PdfServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PdfServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(PdfServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PdfServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(PdfServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PdfServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public PDFWebService.FileItem ConvertFileIntoOnePdf(PDFWebService.FileItem file)
        {
            return base.Channel.ConvertFileIntoOnePdf(file);
        }
        
        public System.Threading.Tasks.Task<PDFWebService.FileItem> ConvertFileIntoOnePdfAsync(PDFWebService.FileItem file)
        {
            return base.Channel.ConvertFileIntoOnePdfAsync(file);
        }
        
        public PDFWebService.FileItem CombineFilesIntoOnePdf(System.Collections.Generic.List<PDFWebService.FileItem> files)
        {
            return base.Channel.CombineFilesIntoOnePdf(files);
        }
        
        public System.Threading.Tasks.Task<PDFWebService.FileItem> CombineFilesIntoOnePdfAsync(System.Collections.Generic.List<PDFWebService.FileItem> files)
        {
            return base.Channel.CombineFilesIntoOnePdfAsync(files);
        }
        
        public PDFWebService.FileItem GetPdfFromUrl(string url, PDFWebService.PageOrientation orientation)
        {
            return base.Channel.GetPdfFromUrl(url, orientation);
        }
        
        public System.Threading.Tasks.Task<PDFWebService.FileItem> GetPdfFromUrlAsync(string url, PDFWebService.PageOrientation orientation)
        {
            return base.Channel.GetPdfFromUrlAsync(url, orientation);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IPdfService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                result.Security.Mode = System.ServiceModel.BasicHttpSecurityMode.Transport;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IPdfService))
            {
                return new System.ServiceModel.EndpointAddress("https://webservices-webdev2.uc.edu/pdfservices/PdfHandling.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return PdfServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IPdfService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return PdfServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IPdfService);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IPdfService,
        }
    }
}
