using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Logging;
using Microsoft.OpenApi.Any;
using Microsoft.OpenApi.Models;
using Swashbuckle.AspNetCore.SwaggerGen;
using System.Text;
using System.Text.Json;

namespace Utilities.Swagger
{
    public class SwaggerFilterGen : IDocumentFilter
    {
        private readonly IWebHostEnvironment _webHostEnvironment;
        private readonly ILogger _logger;
        public static List<string> EnumList = new List<string>();

        public static List<string> Objects = new List<string>();

        public Dictionary<string, Dictionary<string, string>> ObjectDic = new Dictionary<string, Dictionary<string, string>>();

        public SwaggerFilterGen(IWebHostEnvironment webHostEnvironment, ILogger logger)
        {
            //_fileHandler = new LocalFileHandler(new ServerFileServices());
            _webHostEnvironment = webHostEnvironment;
            _logger = logger;
        }

        public void Apply(OpenApiDocument swaggerDoc, DocumentFilterContext context)
        {
            _logger.LogInformation("SwaggerFilterGen - Apply");

            var path = "/wwwroot/js/WebApi/";
            var filename = "Api.ts";
            //var exists = _fileHandler.Exists(path, filename);
            //if (exists)
            //{
            //    var data = _fileHandler.GetFile(path, filename);
            //    var tfilename = "Api_old.ts";
            //    _fileHandler.SaveFile(path, tfilename, data);
            //}
            //swaggerDoc.Components.Schemas
            var data = new StringBuilder();
            // data.AppendLine("/// <reference path=\"../Libs/libs.d.ts\" />");
            //data.AppendLine("/// <reference path=\"../../../node_modules/@types/jquery/index.d.ts\" />");
            data.AppendLine("import { ApiLibrary } from \"../../lib/uc-base-libraries/index.js\";");
            data.AppendLine("//Writing out file on " + DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToShortTimeString());
            data.AppendLine("");
            data.AppendLine("//------------------------------------------------------------------------------");
            data.AppendLine("//<auto-generated>");
            data.AppendLine("//  This file is auto-generated from Swagger");
            data.AppendLine("//  Generator written by Chris Powell - University of Cincinnati");
            data.AppendLine("//");
            data.AppendLine("//  Any changes to this file will be overwritten");
            data.AppendLine("//</auto-generated>");
            data.AppendLine("//------------------------------------------------------------------------------");
            data.AppendLine("");
            data.AppendLine("//module Api {");

            WriteComponents(data, swaggerDoc.Components);
            data.AppendLine("");
            data.AppendLine("");
            data.AppendLine("");
            WriteNamespaces(data, swaggerDoc.Paths);

            data.AppendLine("//}");

            try
            {


                var dataArray = Encoding.ASCII.GetBytes(data.ToString());

                if (!(path.EndsWith("/") || path.EndsWith("\\")))
                {
                    path = path + "/";
                }
                var fi = new FileInfo(MapPath(path + filename));
                if (!fi.Directory.Exists)
                {
                    fi.Directory.Create();
                }
                if (fi.Exists)
                {
                    fi.Delete();
                }
                File.WriteAllBytes(fi.FullName, dataArray);
                //return true;

            } catch (Exception ex)
            {
                _logger.LogError(ex, ex.ToString());
            }


            //_fileHandler.SaveFile(path, filename, dataArray);

            //throw new System.NotImplementedException();
            string jsonString = JsonSerializer.Serialize(swaggerDoc);

            //var a = 0;
            // swaggerDoc


            _logger.LogInformation("SwaggerFilterGen - Finished");

        }

        public string MapPath(string path)
        {

            path = path.Trim();
            path = path.Replace("/", "\\");

            if (path.StartsWith("\\\\") || path.Contains(":\\"))
            {
                return path;
            }

            path = path.Replace("\\\\", "\\");


            if (path.First() == '~')
            {
                path = path.Substring(1);
            }

            if (path.First() != '\\')
            {
                path = "\\" + path;
            }


            //string webRootPath = _webHostEnvironment.WebRootPath;
            string contentRootPath = _webHostEnvironment.ContentRootPath;

            //string path = "";
            //path = Path.Combine(webRootPath, "CSS");



            return Path.Join(contentRootPath, path);

            //throw new NotImplementedException();
            //throw new NotImplementedException();
        }

        public void WriteNamespaces(StringBuilder data, OpenApiPaths paths)
        {
            var pList = (from p in paths.Keys select (Name: p, Path: paths[p])).ToList();



            var tags = (from p in pList from op in p.Path.Operations.Values from t in op.Tags select t.Name).Distinct().ToList().OrderBy(n => n);

            foreach (var name in tags)
            {
                var Paths = (from p in pList
                             from op in p.Path.Operations.Values
                             from t in op.Tags
                             where t.Name == name
                             select p).Distinct().ToList();
                data.AppendLine("     export namespace " + name + " {");

                var PathList = (from p in pList
                             from op in p.Path.Operations.Values
                             from t in op.Tags
                             where t.Name == name
                             select GetFunctionName(p, op)).ToList();

                

                foreach (var p in Paths)
                {
                    var fnames = (from op in p.Path.Operations.Values select GetFunctionName(p, op)).Distinct().ToList();
                    var append = false;
                    foreach(var f in fnames)
                    {
                        append = append || PathList.Where(p => p == f).Count() > 1;
                    }
                    

                    WriteRemoteCallBlock(data, p, append);
                }
                data.AppendLine("     }");
            }


        }



        public void WriteRemoteCallBlock(StringBuilder data, (string Name, OpenApiPathItem Path) entry, bool appendOperation = false)
        {
            var operations = (from p in entry.Path.Operations.Keys select (Name: p, Operation: entry.Path.Operations[p])).ToList();
            foreach (var op in operations)
            {
                WriteRemoteCall(data, entry, op, operations.Count > 1 || appendOperation);
            }
        }

        private bool IsPrimitive(string dataType)
        {
            return dataType == "string" || dataType == "number" || dataType == "boolean" || dataType == "any";
        }

        public string MapDates(string dataType, string classPath = "", string prefillLines = "", int level = 1)
        {
            var sb = new StringBuilder();
            if (ObjectDic.ContainsKey(dataType))
            {
                var od = ObjectDic[dataType];

                var sb2 = new StringBuilder();
                foreach (var param in od.Keys)
                {
                    var tpe = od[param];
                    if (tpe == "Date")
                    {
                        sb2.AppendLine(prefillLines + "     " + "if(" + classPath + param + "!=null) {");

                        sb2.AppendLine(prefillLines + "     " + "     " + classPath + param + " = new Date(" + classPath + param + ");");
                        sb2.AppendLine(prefillLines + "     " + "}");
                    }
                    else if (!IsPrimitive(tpe))
                    {
                        sb2.Append(MapDates(tpe, classPath + param + ".", prefillLines + "     ", level + 1));
                    }
                }
                var sb2Str = sb2.ToString();
                if (!string.IsNullOrWhiteSpace(sb2Str))
                {
                    sb.AppendLine(prefillLines + "if(" + classPath.Substring(0, classPath.Length - 1) + "!=null) {");

                    sb.Append(sb2Str);

                    sb.AppendLine(prefillLines + "}");
                }
            }
            else if (dataType.Contains("Array") && dataType.Contains("<"))
            {
                var st = dataType.IndexOf("<") + 1;
                var en = dataType.IndexOf(">") - 1;
                var subType = dataType.Substring(st, en - st + 1);

                if (!IsPrimitive(subType))
                {
                    var mt = MapDates(subType, "item" + level + ".", prefillLines + "     " + "     ", level + 1);

                    if (!string.IsNullOrWhiteSpace(mt))
                    {
                        sb.AppendLine(prefillLines + "if(" + classPath.Substring(0, classPath.Length - 1) + "!=null) {");
                        sb.AppendLine(prefillLines + "     " + classPath + "forEach((item" + level + ") => {");

                        sb.Append(mt);

                        sb.AppendLine(prefillLines + "     " + "});");
                        sb.AppendLine(prefillLines + "}");
                    }
                }
            }

            return sb.ToString();
        }

        private string GetFunctionName((string Name, OpenApiPathItem Path) entry, OpenApiOperation operation)
        {
            var arr1 = entry.Name.Split("{");
            var arr2 = arr1[0].Split("/");

            var last = operation.OperationId;

            if (string.IsNullOrEmpty(last))
            {
                last = arr2[arr2.Length - 1];
            }

            if (string.IsNullOrEmpty(last) && arr2.Length >= 2)
            {
                last = arr2[arr2.Length - 2];
            }
            return last;
        }

        public void WriteRemoteCall(StringBuilder data, (string Name, OpenApiPathItem Path) entry, (OperationType Name, OpenApiOperation Operation) operation, bool appendOperation = false)
        {
            //var url = entry.Name;
            var url = ("\"" + entry.Name.Replace("{", "\" + ").Replace("}", " + \"") + "\"");


            var last = GetFunctionName(entry, operation.Operation);

            if (appendOperation)
            {
                last = operation.Name.ToString() + last;
            }

            OpenApiResponse response = null;
            if (operation.Operation.Responses.ContainsKey("200"))
            {
                response = operation.Operation.Responses["200"];
            }

            OpenApiMediaType jsonReturn = null;
            if (response?.Content.ContainsKey("application/json") ?? false)
            {
                jsonReturn = response?.Content["application/json"];
            }
            var funcType = HandleType(jsonReturn?.Schema);
            //operation.Operation.Parameters.First().In


            var requiredParams = (from p in operation.Operation.Parameters where p.Schema.Default == null || IsNullable(p.Schema) select p).ToList();
            var optionalParams = (from p in operation.Operation.Parameters where p.Schema.Default != null && !IsNullable(p.Schema) select p).ToList();


            var paramString = "";
            var paramCallString = "";
            foreach (var p in requiredParams)
            {
                var param = p.Name + (IsNullable(p.Schema) ? "?" : "") + ": " + HandleType(p.Schema);
                if (paramString != "")
                {
                    paramString = paramString + ", ";
                    paramCallString = paramCallString + ", ";
                }
                paramString = paramString + param;
                paramCallString = paramCallString + p.Name;

                if (p.In == ParameterLocation.Query)
                {

                    url = url.Substring(0, url.Length-1) + (url.Contains("?") ? "&" : "?") + p.Name + "=\" + " + p.Name + " + \"\"";
                }

            }
            var pname = "data";
            var hasBody = false;
            if (operation.Operation.RequestBody != null)
            {
                if (operation.Operation.RequestBody.Content.ContainsKey("application/json"))
                {
                    hasBody = true;
                    var content = operation.Operation.RequestBody.Content["application/json"];
                    var tpe = HandleType(content.Schema);

                    pname = GetBodyName(content.Schema);
                    if (string.IsNullOrWhiteSpace(pname))
                    {
                        pname = "data";
                    }
                    //if (content.Schema.Reference == null && content.Schema.Items?.Reference == null)
                    //{
                    //    pname = "data";
                    //}

                    var param = pname + "?" + ": " + tpe;
                    if (paramString != "")
                    {
                        paramString = paramString + ", ";
                        paramCallString = paramCallString + ", ";
                    }
                    paramString = paramString + param;
                    paramCallString = paramCallString + pname;


                }
            }

            foreach (var p in optionalParams)
            {
                var param = p.Name + (IsNullable(p.Schema) ? "?" : "") + ": " + HandleType(p.Schema) + " = " + DefaultValue(p.Schema);
                if (paramString != "")
                {
                    paramString = paramString + ", ";
                    paramCallString = paramCallString + ", ";
                }
                paramString = paramString + param;
                paramCallString = paramCallString + p.Name;


                if (p.In == ParameterLocation.Query)
                {
                    url = url.Substring(0, url.Length-1) + (url.Contains("?") ? "&" : "?") + p.Name + "=\" + " + p.Name + " + \"\"";
                }
            }



            data.AppendLine("          export function get" + last + "Url(" + paramString + (paramString != "" ? ", " : "") + "options?: any): string {");



            data.AppendLine("               var origUrl = '" + entry.Name + "';");
            data.AppendLine("               var url = " + url + ";");
            data.AppendLine("               var _defaults = { };");
            data.AppendLine("               var _settings = $.extend({ }, _defaults, options || { });");

            data.AppendLine("               for (var key in _settings)");
            data.AppendLine("               {");
            data.AppendLine("                   if (_settings.hasOwnProperty(key) && _settings[key] != null)");
            data.AppendLine("                   {");
            data.AppendLine("                       url += url.indexOf('?') == -1 ? '?' : '&';");
            data.AppendLine("                       url += key + '=' + _settings[key];");
            data.AppendLine("                   }");
            data.AppendLine("               }");
            data.AppendLine("               return url;");

            data.AppendLine("          }");


            data.AppendLine("          export async function " + last.ToCamelCasing() + "Async(" + paramString + (paramString != "" ? ", " : "") + "options?: any): Promise<" + funcType + "> {");
            data.AppendLine("               var url = get" + last + "Url(" + paramCallString + (paramCallString != "" ? ", " : "") + "options);");
            if (!hasBody)
            {
                data.AppendLine("               var data = null;");
            }

            if (operation.Name == OperationType.Get)
            {
                data.AppendLine("               var value = await ApiLibrary.getCallAsync<" + funcType + ">(url, 0, " + pname + ");");
            }
            if (operation.Name == OperationType.Post)
            {
                data.AppendLine("               var value = await ApiLibrary.postCallAsync<" + funcType + ">(url, 0, " + pname + ");");
            }
            if (operation.Name == OperationType.Put)
            {
                data.AppendLine("               var value = await ApiLibrary.putCallAsync<" + funcType + ">(url, 0, " + pname + ");");
            }
            if (operation.Name == OperationType.Delete)
            {
                data.AppendLine("               var value = await ApiLibrary.deleteCallAsync<" + funcType + ">(url, 0, " + pname + ");");
            }
            if (!(funcType == "string" || funcType == "number" || funcType == "boolean"))
            {
                data.AppendLine("");
                data.Append(MapDates(funcType, "value.", "               "));
                data.AppendLine("");
            }
            data.AppendLine("               return value;");
            data.AppendLine("          }");


            var extraName = "";
            if (operation.Name == OperationType.Delete)
            {
                extraName = "Item";
            }


            data.AppendLine("          export async function " + last.ToCamelCasing() + extraName + "(" + paramString + (paramString != "" ? ", " : "") + "options?: any, callback?:(data:" + funcType + ")=>void, onError?:(data:Error)=>void): Promise<" + funcType + "> {");
            data.AppendLine("               var url = get" + last + "Url(" + paramCallString + (paramCallString != "" ? ", " : "") + "options);");
            if (!hasBody)
            {
                data.AppendLine("               var data = null;");
            }
            data.AppendLine("               try {");
            if (operation.Name == OperationType.Get)
            {
                data.AppendLine("                   var returnData = await ApiLibrary.getCallAsync<" + funcType + ">(url, 0);");
            }
            if (operation.Name == OperationType.Post)
            {
                data.AppendLine("                   var returnData = await ApiLibrary.postCallAsync<" + funcType + ">(url, 0, " + pname + ");");
            }
            if (operation.Name == OperationType.Put)
            {
                data.AppendLine("                   var returnData = await ApiLibrary.putCallAsync<" + funcType + ">(url, 0, " + pname + ");");
            }
            if (operation.Name == OperationType.Delete)
            {
                data.AppendLine("                   var returnData = await ApiLibrary.deleteCallAsync<" + funcType + ">(url, 0, " + pname + ");");
            }
            if (!(funcType == "string" || funcType == "number" || funcType == "boolean"))
            {
                data.AppendLine("");
                data.Append(MapDates(funcType, "returnData.", "                   "));
                data.AppendLine("");
            }
            data.AppendLine("                   if (callback)");
            data.AppendLine("                   {");
            data.AppendLine("                       callback(returnData);");
            data.AppendLine("                   }");
            data.AppendLine("               } catch (error){");
            data.AppendLine("                    let e:Error= error;");
            data.AppendLine("                    if (onError)");
            data.AppendLine("                    {");
            data.AppendLine("                        onError(e);");
            data.AppendLine("                    }");
            data.AppendLine("               }");
            data.AppendLine("               return;");

            data.AppendLine("          }");



        }



        public void WriteComponents(StringBuilder data, OpenApiComponents components)
        {
            foreach (var c in components.Schemas.Keys)
            {
                WriteSchema(data, c, components.Schemas[c]);
            }
        }

        public void WriteSchema(StringBuilder data, string name, OpenApiSchema schema)
        {
            Objects.Add(name);
            if (!IsEnum(schema))
            {
                var paramDic = new Dictionary<string, string>();

                data.AppendLine("     export class " + name + " {");
                foreach (var paramName in schema.Properties.Keys)
                {
                    var param = schema.Properties[paramName];
                    if (IsValid(param))
                    {
                        var tpe = HandleType(param);
                        if (!paramDic.ContainsKey(paramName))
                        {
                            paramDic.Add(paramName, tpe);
                        }

                        data.AppendLine("           " + paramName + (IsNullable(param) ? "?" : "") + ": " + tpe + ";");
                        //data.AppendLine("           //Format = " + param.Format);
                        //data.AppendLine("           //Type = " + param.Type);
                    }
                }
                data.AppendLine("");
                data.AppendLine("           constructor() {");
                data.AppendLine("           }");
                data.AppendLine("     }");

                if (!ObjectDic.ContainsKey(name))
                {
                    ObjectDic.Add(name, paramDic);
                }
            }
            else
            {
                AddEnum(name);
                data.AppendLine("     export enum " + name + " {");
                foreach (var e in schema.Enum)
                {
                    var e2 = e as OpenApiString;
                    data.AppendLine("          " + e2.Value + ",");
                }
                data.AppendLine("     }");
            }
        }


        public bool IsEnum(OpenApiSchema schema)
        {
            return schema.Enum?.Any() ?? false;
        }
        public bool IsNullable(OpenApiSchema schema)
        {
            return schema.Nullable;
        }
        public bool IsOptional(OpenApiSchema schema)
        {
            return schema.Default != null;
        }
        public bool IsValid(OpenApiSchema schema)
        {
            return true;
        }
        public string GetBodyName(OpenApiSchema schema)
        {
            //var type = schema.Format ?? schema.Type;
            var type = schema.Format ?? schema.Type;
            type = type ?? "";

            if (type.ToUpper().Contains("DATE"))
            {
                //var a = 1;
            }

            if (string.IsNullOrWhiteSpace(type) && schema.Items?.Reference != null)
            {
                type = schema.Items.Reference.Id;
            }

            if (string.IsNullOrWhiteSpace(type) && schema.Reference != null)
            {
                type = schema.Reference.Id;
            }

            if (string.IsNullOrWhiteSpace(type))
            {
                type = "void";
            }
            //if (type.Contains("Nullable"))
            //{
            //    type = type.Replace("Nullable<", "").Replace(">", "");// + "?";
            //}

            var numbers = new List<string>
            {
                "integer",
                "int16",
                "int32",
                "int64",
                "uint16",
                "uint32",
                "uint64",
                "single",
                "double",
                "decimal",
                "byte",
                "sbyte"
            };
            numbers.ForEach((s) =>
            {
                type = type.Replace(s, "number");
            });
            type = type.Replace("Boolean", "boolean");
            //DateTime
            //type = type.Replace("DateTime", "string");
            //postal-code
            //email
            type = type.Replace("postal-code", "string");
            type = type.Replace("email", "string");
            type = type.Replace("tel", "string");

            type = type.Replace("date-time", "Date");
            type = type.Replace("date", "Date");
            type = type.Replace("timespan", "string");

            type = type.Replace("object", "any");
            type = type.Replace("fileinfo", "any");

            type = type.Replace("String", "string");
            type = type.Replace("char", "string");


            type = type.Replace("array", "Array");
            type = type.Replace("list<", "Array<");
            type = type.Replace("ilist", "Array");
            type = type.Replace("ienumerable", "Array");
            type = type.Replace("icollection", "Array");
            type = type.Replace("iqueryable", "Array");
            type = type.Replace("iarray", "Array");

            if (type == "Array")
            {
                type = HandleType(schema.Items) + "s";
            }


            return type;
        }
        public string HandleType(OpenApiSchema schema)
        {
            if (schema == null)
            {
                return "any";
            }

            var type = schema.Format ?? schema.Type;
            //if (type.)
            type = type ?? "";

            if (type.ToUpper().Contains("DATE"))
            {
                //var a = 1;
            }

            if (string.IsNullOrWhiteSpace(type) && schema.Items?.Reference != null)
            {
                type = schema.Items.Reference.Id;
            }

            if (string.IsNullOrWhiteSpace(type) && schema.Reference != null)
            {
                type = schema.Reference.Id;
            }

            if (string.IsNullOrWhiteSpace(type))
            {
                type = "void";
            }
            //if (type.Contains("Nullable"))
            //{
            //    type = type.Replace("Nullable<", "").Replace(">", "");// + "?";
            //}

            var numbers = new List<string>
            {
                "integer",
                "int16",
                "int32",
                "int64",
                "uint16",
                "uint32",
                "uint64",
                "single",
                "double",
                "decimal",
                "byte",
                "sbyte"
            };
            numbers.ForEach((s) =>
            {
                type = type.Replace(s, "number");
            });
            type = type.Replace("Boolean", "boolean");
            //DateTime
            //type = type.Replace("DateTime", "string");
            type = type.Replace("postal-code", "string");
            type = type.Replace("email", "string");
            type = type.Replace("tel", "string");


            type = type.Replace("date-time", "Date");
            type = type.Replace("date", "Date");
            type = type.Replace("timespan", "string");

            type = type.Replace("object", "any");
            type = type.Replace("fileinfo", "any");

            type = type.Replace("String", "string");
            type = type.Replace("char", "string");


            type = type.Replace("array", "Array");
            type = type.Replace("list<", "Array<");
            type = type.Replace("ilist", "Array");
            type = type.Replace("ienumerable", "Array");
            type = type.Replace("icollection", "Array");
            type = type.Replace("iqueryable", "Array");
            type = type.Replace("iarray", "Array");

            if (type == "Array")
            {
                type = type + "<" + HandleType(schema.Items) + ">";
            }


            return type;
        }

        public string DefaultValue(OpenApiSchema schema)
        {
            var type = HandleType(schema);
            if (IsNullable(schema))
            {
                return "null";
            }

            if (type.Contains("number"))
            {
                return "0";
            }
            if (type.Contains("boolean"))
            {
                return "false";
            }

            if (type.Contains("Date"))
            {
                return "new Date()";
            }


            return "null";
        }



        public static string DefaultOld(string type)
        {

            type = type ?? "";
            if (type.Contains("Nullable"))
            {
                return "null";
            }
            var numbers = new List<string>
            {
                "integer",
                "Int16",
                "Int32",
                "Int64",
                "UInt16",
                "UInt32",
                "UInt64",
                "Single",
                "Double",
                "Decimal",
                "Byte",
                "SByte"
            };
            foreach (var s in numbers)
            {
                if (type.Contains(s))
                {
                    return "0";
                }
            }

            if (type.Contains("Boolean"))
            {
                return "false";
            }

            if (type.Contains("DateTime"))
            {
                return "new Date()";
            }


            return "null";
        }
        public static bool IsValidOld(string type)
        {
            type = type ?? "";

            if (type.Contains("Func"))
            {
                return false;
            }
            return true;
        }
        public static bool IsNullableOld(string type)
        {
            type = type ?? "";
            return type.Contains("Nullable");
        }
        public static void AddEnum(string type)
        {
            if (!EnumList.Contains(type))
            {
                EnumList.Add(type);
            }
        }
        public static bool IsEnumOld(string type)
        {
            return EnumList.Contains(type);
        }

        public static bool IsBaseTypeOld(string type)
        {
            type = type ?? "";

            if (string.IsNullOrWhiteSpace(type))
            {
                return true;
            }

            if (type.Contains("Nullable"))
            {
                return true;
            }

            var numbers = new List<string>
            {
                "Int16",
                "Int32",
                "Int64",
                "UInt16",
                "UInt32",
                "UInt64",
                "Single",
                "Double",
                "Decimal",
                "Byte",
                "SByte"
            };
            foreach (var s in numbers)
            {
                if (type.Contains(s))
                {
                    return true;
                }
            }

            if (type.Contains("Boolean"))
            {
                return true;
            }

            if (type.Contains("DateTime"))
            {
                return true;
            }
            if (type.Contains("TimeSpan"))
            {
                return true;
            }
            if (type.Contains("Object"))
            {
                return true;
            }
            if (type.Contains("FileInfo"))
            {
                return true;
            }

            if (type.Contains("String"))
            {
                return true;
            }

            if (type.Contains("Char"))
            {
                return true;
            }


            return false;
        }
        public static string HandleTypeOld(string basetype)
        {
            var type = basetype;
            type = type ?? "";
            if (string.IsNullOrWhiteSpace(type))
            {
                type = "void";
            }
            if (type.Contains("Nullable"))
            {
                type = type.Replace("Nullable<", "").Replace(">", "");// + "?";
            }

            var numbers = new List<string>
            {
                "Int16",
                "Int32",
                "Int64",
                "UInt16",
                "UInt32",
                "UInt64",
                "Single",
                "Double",
                "Decimal",
                "Byte",
                "SByte"
            };
            numbers.ForEach((s) =>
            {
                type = type.Replace(s, "number");
            });
            type = type.Replace("Boolean", "boolean");
            //DateTime
            //type = type.Replace("DateTime", "string");
            type = type.Replace("DateTime", "Date");
            type = type.Replace("TimeSpan", "string");

            type = type.Replace("Object", "any");
            type = type.Replace("FileInfo", "any");

            type = type.Replace("String", "string");
            type = type.Replace("Char", "string");


            type = type.Replace("List<", "Array<");
            type = type.Replace("IList", "Array");
            type = type.Replace("IEnumerable", "Array");
            type = type.Replace("ICollection", "Array");
            type = type.Replace("IQueryable", "Array");
            type = type.Replace("IArray", "Array");



            return type;
        }


    }
}
