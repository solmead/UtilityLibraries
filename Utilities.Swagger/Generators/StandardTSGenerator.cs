using Microsoft.Extensions.Logging;
using Microsoft.OpenApi.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Utilities.Swagger.Abstract;
using Utilities.Swagger.Configs;
using Utilities.Swagger.Models;

namespace Utilities.Swagger.Generators
{
    public class StandardTSGenerator : IFileGenerator, IGeneratorInfo
    {
        private readonly SwaggerGenProfile _config;
        private readonly ILogger _logger;
        private readonly ISwaggerGen _swaggerFilterGen;
        private readonly IFileWriter _fileWriter;

        //private StringBuilder data = new StringBuilder();


        internal StandardTSGenerator(SwaggerGenProfile config, ILogger logger, ISwaggerGen swaggerFilterGen, IFileWriter fileWriter)
        {
            _config = config;
            _logger = logger;
            _swaggerFilterGen = swaggerFilterGen;
            _fileWriter = fileWriter;

            fileWriter.SetGenerator(this);
        }


      


        public string GetFileHeader(List<string> modules, List<string> enums, string baseLibrariesDirectory, bool isRepo = false)
        {
            var data = new StringBuilder();

            data.AppendLine("//Writing out file on " + DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToShortTimeString());
            data.AppendLine("");
            data.AppendLine("//------------------------------------------------------------------------------");
            data.AppendLine("//<auto-generated>");
            data.AppendLine("//  This file is auto-generated from Swagger");
            data.AppendLine("//  Generator written by Chris Powell - University of Cincinnati");
            data.AppendLine("//");
            data.AppendLine("//  Any changes to this file will be overwritten");
            data.AppendLine("//</auto-generated>");
            data.AppendLine("//------------------------------------------------------------------------------");
            data.AppendLine("");

            if (isRepo)
            {
                data.AppendLine("import { ApiLibrary } from \"" + baseLibrariesDirectory + "uc-base-libraries/index.js\";");
            }

            if (enums?.Any() ?? false)
            {

                data.AppendLine("");
                data.AppendLine("// enum definitions");
                Dictionary<string, string> enumLocs;
                if (isRepo)
                {
                    enumLocs = enums.ToDictionary(e => e, e=> _fileWriter.GetEnumToRepoImportLocation(e));
                } else
                {
                    enumLocs = enums.ToDictionary(e => e, e => _fileWriter.GetEnumToModuleImportLocation(e));
                }

                var locList = enumLocs.Values.Distinct().ToList();
                var one = false;
                if (locList.Count()==1)
                {
                    data.AppendLine("import * as Enums from '" +locList.First() + "';");
                    one = true;
                } else
                {
                    foreach(var el in enumLocs)
                    {
                        data.AppendLine("import * as Enums_" + el.Key + " from '" + el.Value + "';");
                    }
                }
                foreach (var el in enumLocs)
                {
                    data.AppendLine("import " + el.Key + " = Enums" + (!one ? "_" + el.Key : "") + "." + el.Key + ";");
                }
            }

            if (modules?.Any() ?? false)
            {
                data.AppendLine("");
                data.AppendLine("// module definitions");
                Dictionary<string, string> modLocs;
                if (isRepo)
                {
                    modLocs = modules.ToDictionary(e => e, e => _fileWriter.GetModuleToRepoImportLocation(e));
                }
                else
                {
                    modLocs = modules.ToDictionary(e => e, e => _fileWriter.GetModuleToModuleImportLocation(e));
                }

                foreach (var el in modLocs)
                {
                    data.AppendLine("import { " + el.Key + " } from '" + el.Value + "';");
                }
            }
            data.AppendLine("");


            return data.ToString();
        }



        public void StartSwaggerGen()
        {
            _fileWriter.StartFiles();


        }

        public void EndSwaggerGen()
        {
            _fileWriter.FinalizeFiles();
            //try
            //{


            //    var dataArray = Encoding.ASCII.GetBytes(data.ToString());

            //    if (!(_config.Path.EndsWith("/") || _config.Path.EndsWith("\\")))
            //    {
            //        _config.Path = _config.Path + "/";
            //    }
            //    var fi = new FileInfo(_swaggerFilterGen.MapPath(_config.Path + _config.Filename));
            //    if (!fi.Directory.Exists)
            //    {
            //        fi.Directory.Create();
            //    }
            //    if (fi.Exists)
            //    {
            //        fi.Delete();
            //    }
            //    File.WriteAllBytes(fi.FullName, dataArray);
            //    //return true;

            //}
            //catch (Exception ex)
            //{
            //    _logger.LogError(ex, ex.ToString());
            //}

        }

        public void WriteEnumDefinition(string enumName, List<string> values)
        {
            var data = new StringBuilder();
            data.AppendLine("     export enum " + enumName + " {");
            foreach (var e in values)
            {
                data.AppendLine("          " + e + ",");
            }
            data.AppendLine("     }");

            _fileWriter.WriteEnumToFile(enumName, data.ToString());
        }

        public void WriteObjectDefinition(string className, Dictionary<string, ObjParamInfo> objectParams)
        {
            var data = new StringBuilder();
            if (className == "Actor")
            {
                var a = 1;
            }

            //data.AppendLine("     export interface I" + className + " {");

            //foreach (var paramInfo in objectParams.Values)
            //{
            //    //if (!_swaggerFilterGen.IsPrimitive(paramInfo.DataType) && !_swaggerFilterGen.IsEnum(paramInfo.DataType))
            //    //{
            //    //    data.AppendLine("           @Type(() => " + paramInfo.DataType + ")");
            //    //}
            //    data.AppendLine("           " + paramInfo.Name + (paramInfo.IsNullable ? "?" : "") + ": " + paramInfo.DataType + ";");
            //}
            //data.AppendLine("           }");
            //data.AppendLine("");

            data.AppendLine("     export class " + className + " {"); //" implements I" + className + 

            foreach (var paramInfo in objectParams.Values)
            {
                //if (!_swaggerFilterGen.IsPrimitive(paramInfo.DataType) && !_swaggerFilterGen.IsEnum(paramInfo.DataType))
                //{
                //    data.AppendLine("           @Type(() => " + paramInfo.DataType + ")");
                //}
                data.AppendLine("           " + paramInfo.Name + (paramInfo.IsNullable ? "?" : "") + ": " + paramInfo.DataType + ";");
            }
            data.AppendLine("");
            data.AppendLine("           constructor() {");
            data.AppendLine("           }");

            data.AppendLine("           ");
            data.AppendLine("           public checkDates():void {");
            data.AppendLine("                      ");

            foreach (var paramInfo in objectParams.Values)
            {
                data.Append(GetDateCheckCallSet("this." + paramInfo.Name, paramInfo.DataType));
            }
            data.AppendLine("                      ");
            data.AppendLine("           }");
            data.AppendLine("           ");


            data.AppendLine("           static convertFrom(obj:any):" + className + " {");
            data.AppendLine("                      let it = <" + className + ">Object.assign(new " + className + "(), obj);");
            foreach (var paramInfo in objectParams.Values)
            {
                if (_swaggerFilterGen.IsArray(paramInfo.DataType))
                {
                    var subType = _swaggerFilterGen.ArraySubType(paramInfo.DataType);
                    if (!_swaggerFilterGen.IsPrimitive(subType) && !_swaggerFilterGen.IsDate(subType) && !_swaggerFilterGen.IsEnum(subType))
                    {
                        data.AppendLine("                      if(it." + paramInfo.Name + "!=null) {");
                        data.AppendLine("                           var subArray_" + subType + " = new Array<" + subType + ">();");
                        data.AppendLine("                           it." + paramInfo.Name + ".forEach((o)=>{");
                        data.AppendLine("                                var newItem = " + subType + ".convertFrom(o);");
                        data.AppendLine("                                subArray_" + subType + ".push(newItem);");
                        data.AppendLine("                           });");
                        data.AppendLine("                           it." + paramInfo.Name + " = subArray_" + subType + ";");
                        data.AppendLine("                      }");
                        data.AppendLine("           ");
                    }


                }
                else if (!_swaggerFilterGen.IsPrimitive(paramInfo.DataType) && !_swaggerFilterGen.IsDate(paramInfo.DataType) && !_swaggerFilterGen.IsEnum(paramInfo.DataType))
                {
                    data.AppendLine("                      if(it." + paramInfo.Name + "!=null) {");
                    data.AppendLine("                           it." + paramInfo.Name + " = " + paramInfo.DataType + ".convertFrom(it." + paramInfo.Name + ");");
                    data.AppendLine("                      }");
                    data.AppendLine("           ");
                }

                data.Append(GetDateCheckCallSet("it." + paramInfo.Name, paramInfo.DataType));

            }
            data.AppendLine("                      return it;");
            data.AppendLine("           }");
            data.AppendLine("     }");


            var enums = objectParams.Values.Where((op) => _swaggerFilterGen.IsEnum(op.DataType)).Select((p) => p.DataType).ToList();
            var modules = objectParams.Values.Where((op) => !_swaggerFilterGen.IsEnum(op.DataType) && 
                                !_swaggerFilterGen.IsPrimitive(op.DataType) && 
                                !_swaggerFilterGen.IsArray(op.DataType)).Select((p) => p.DataType).ToList();
            var arrays = objectParams.Values.Where((op) => _swaggerFilterGen.IsGenericArray(op.DataType)).Select((p) => _swaggerFilterGen.ArraySubType(p.DataType)).ToList();
            var modules2 = arrays.Where((op) => !_swaggerFilterGen.IsEnum(op) &&
                                !_swaggerFilterGen.IsPrimitive(op) &&
                                !_swaggerFilterGen.IsArray(op)).Select((p) => p).ToList();

            modules.AddRange(modules2);


            enums = enums.Distinct().ToList();
            modules = modules.Where((m) => m != className).Distinct().ToList();


            _fileWriter.WriteModuleToFile(className, modules, enums, data.ToString());
        }


        private string GetDateCheckCallSet(string variableName, string dataType)
        {
            var data = new StringBuilder();


            if (dataType == "Date")
            {
                data.AppendLine("                      " + "if(" + variableName + "!=null) {");

                data.AppendLine("                      " + "     " + variableName + " = new Date(" + variableName + ");");
                data.AppendLine("                      " + "}");
            }
            else if (!_swaggerFilterGen.IsPrimitive(dataType) && !_swaggerFilterGen.IsEnum(dataType) && !_swaggerFilterGen.IsArray(dataType))
            {
                data.AppendLine("                      if ((" + variableName + "!=null) && ('checkDates' in " + variableName + ")) {");
                data.AppendLine("                      " + "     " + variableName + ".checkDates();");
                data.AppendLine("                      " + "}");
            }
            else if (_swaggerFilterGen.IsGenericArray(dataType))
            {
                var subType = _swaggerFilterGen.ArraySubType(dataType);
                if (subType == "Date")
                {
                    data.AppendLine("                      " + "if(" + variableName + "!=null) {");
                    data.AppendLine("                      " + "     var newArray = new Array<Date>();");
                    data.AppendLine("                      " + "     " + variableName + ".forEach((item) => {");
                    data.AppendLine("                      " + "           newArray.push(new Date(item));");
                    data.AppendLine("                      " + "     " + "});");
                    data.AppendLine("                      " + "     " + variableName + " = newArray;");
                    data.AppendLine("                      " + "}");
                }
                else if (!_swaggerFilterGen.IsPrimitive(subType) && !_swaggerFilterGen.IsEnum(subType) && !_swaggerFilterGen.IsArray(subType))
                {
                    data.AppendLine("                      if (" + variableName + "!=null) {");
                    data.AppendLine("                      " + "     " + variableName + ".forEach((item) => {");
                    data.AppendLine("                      " + "          if ((item!=null) && ('checkDates' in item)) {");
                    data.AppendLine("                      " + "               item.checkDates();");
                    data.AppendLine("                      " + "          }");
                    data.AppendLine("                      " + "     });");
                    data.AppendLine("                      " + "}");
                }
            }

            return data.ToString();
        }

       // public void WriteRemoteCall(string namespaceName, OperationType operation, string functionString, Dictionary<string, ObjParamInfo> objectParams, string paramString, string paramCallString, string funcType, bool hasBody, string bodyName, string origUrl, string finalUrl)
        public void WriteRemoteCall(string namespaceName, OperationType operation, string functionString, Dictionary<string, ObjParamInfo> objectParams, string url, string? messages = null)
        {
            var data = new StringBuilder();
            var paramList = objectParams.Values.ToList();

            var paramString = "";
            var paramCallString = "";
            foreach (var p in paramList)
            {
                if (!p.IsReturned)
                {
                    var param = p.Name + (p.IsNullable ? "?" : "") + ": " + p.DataType; // + (p.IsNullable ? " = " + _swaggerFilterGen.DefaultValue(p.DataType) : "");
                    if (paramString != "")
                    {
                        paramString = paramString + ", ";
                        paramCallString = paramCallString + ", ";
                    }
                    paramString = paramString + param;
                    paramCallString = paramCallString + p.Name;
                }
            }
            var bodyParam = paramList.FirstOrDefault((p) => p.IsBody);
            var funcParam = paramList.FirstOrDefault((p) => p.IsReturned);

            var funcType = funcParam?.DataType;
            var hasBody = bodyParam != null;
            var bodyName = bodyParam?.Name;


            data.AppendLine("          export function get" + functionString + "Url(" + paramString + (paramString != "" ? ", " : "") + "options?: any): string {");

            data.AppendLine("                //" + messages?.Replace(Environment.NewLine, Environment.NewLine + "                //"));

            //data.AppendLine("               var origUrl = '" + origUrl + "';");
            data.AppendLine("               var url = " + url + ";");
            data.AppendLine("               var _defaults = { };");
            data.AppendLine("               var _settings = $.extend({ }, _defaults, options || { });");

            data.AppendLine("               for (var key in _settings)");
            data.AppendLine("               {");
            data.AppendLine("                   if (_settings.hasOwnProperty(key) && _settings[key] != null)");
            data.AppendLine("                   {");
            data.AppendLine("                       url += url.indexOf('?') == -1 ? '?' : '&';");
            data.AppendLine("                       url += key + '=' + _settings[key];");
            data.AppendLine("                   }");
            data.AppendLine("               }");
            data.AppendLine("               return url;");
            data.AppendLine("          }");


            data.AppendLine("          export async function " + functionString.ToCamelCasing() + "Async(" + paramString + (paramString != "" ? ", " : "") + "options?: any): Promise<" + funcType + "> {");
            data.AppendLine("               var url = get" + functionString + "Url(" + paramCallString + (paramCallString != "" ? ", " : "") + "options);");
            if (!hasBody)
            {
                data.AppendLine("               var data = null;");
            }

            if (operation == OperationType.Get)
            {
                data.AppendLine("               var value = await ApiLibrary.getCallAsync<" + funcType + ">(url, 0, " + bodyName + ");");
            }
            if (operation == OperationType.Post)
            {
                data.AppendLine("               var value = await ApiLibrary.postCallAsync<" + funcType + ">(url, 0, " + bodyName + ");");
            }
            if (operation == OperationType.Put)
            {
                data.AppendLine("               var value = await ApiLibrary.putCallAsync<" + funcType + ">(url, 0, " + bodyName + ");");
            }
            if (operation == OperationType.Delete)
            {
                data.AppendLine("               var value = await ApiLibrary.deleteCallAsync<" + funcType + ">(url, 0, " + bodyName + ");");
            }
            if (!(funcType == "string" || funcType == "number" || funcType == "boolean" || funcType == "any" || funcType == "void"))
            {
                data.AppendLine("");

                //data.AppendLine("debugger;");
                if (_swaggerFilterGen.IsArray(funcType))
                {
                    var subType = _swaggerFilterGen.ArraySubType(funcType);

                    if (!_swaggerFilterGen.IsPrimitive(subType) && !(subType == "any" || subType == "void"))
                    {
                        data.AppendLine("               var newArray = new Array<" + subType + ">();");
                        data.AppendLine("                value.forEach((item) => {");
                        data.AppendLine("                     var newItem = " + subType + ".convertFrom(item);");
                        data.AppendLine("                     newArray.push(newItem);");
                        data.AppendLine("               });");
                        data.AppendLine("               var value2 = newArray;");
                    }
                    else
                    {
                        data.AppendLine("               var value2 = value;");
                    }
                }
                else
                {
                    data.AppendLine("               var value2 = " + funcType + ".convertFrom(value);");
                }

                //data.AppendLine("debugger;");

                //GetDateCheckCall("value2", funcType);
                //data.AppendLine("               if ((value2!=null) && ('checkDates' in value2)) {");
                //data.AppendLine("               " + "     value2.checkDates();");
                //data.AppendLine("               " + "}");
                data.AppendLine("               " + "value = value2;");


                //data.Append(_swaggerFilterGen.MapDates(funcType, "value.", "               "));
                data.AppendLine("");
            }
            data.AppendLine("               return value;");
            data.AppendLine("          }");
            data.AppendLine("");


            var extraName = "";
            if (operation == OperationType.Delete)
            {
                extraName = "Item";
            }


            data.AppendLine("          export async function " + functionString.ToCamelCasing() + extraName + "(" + paramString + (paramString != "" ? ", " : "") + "options?: any, callback?:(data:" + funcType + ")=>void, onError?:(data:Error)=>void): Promise<void> {");
            data.AppendLine("               try {");
            data.AppendLine("                   var returnData = await this." + functionString.ToCamelCasing() + "Async(" + paramCallString + (paramCallString != "" ? ", " : "") + "options);");
            data.AppendLine("                   if (callback) {");
            data.AppendLine("                       callback(returnData);");
            data.AppendLine("                   }");
            data.AppendLine("               } catch (error){");
            data.AppendLine("                    let e:Error= error;");
            data.AppendLine("                    if (onError)");
            data.AppendLine("                    {");
            data.AppendLine("                        onError(e);");
            data.AppendLine("                    }");
            data.AppendLine("               }");
            data.AppendLine("               return;");
            data.AppendLine("          }");





            var enums = objectParams.Values.Where((op) => _swaggerFilterGen.IsEnum(op.DataType)).Select((p) => p.DataType).ToList();
            var modules = objectParams.Values.Where((op) => !_swaggerFilterGen.IsEnum(op.DataType) &&
                                !_swaggerFilterGen.IsPrimitive(op.DataType) &&
                                !_swaggerFilterGen.IsArray(op.DataType)).Select((p) => p.DataType).ToList();
            var arrays = objectParams.Values.Where((op) => _swaggerFilterGen.IsGenericArray(op.DataType)).Select((p) => _swaggerFilterGen.ArraySubType(p.DataType)).ToList();
            var modules2 = arrays.Where((op) => !_swaggerFilterGen.IsEnum(op) &&
                                !_swaggerFilterGen.IsPrimitive(op) &&
                                !_swaggerFilterGen.IsArray(op)).Select((p) => p).ToList();

            modules.AddRange(modules2);


            enums = enums.Distinct().ToList();
            modules = modules.Distinct().ToList();


            _fileWriter.WriteFunctionToFile(namespaceName, functionString, modules, enums, data.ToString());
        }


        //All Data Object
        public void StartComponents(string componentName)
        {

        }

        public void EndComponents(string componentName)
        {
            //data.AppendLine("");
            //data.AppendLine("");
            //data.AppendLine("");
        }

        //Specific Data Object
        public void StartSchemas(string schemaName)
        {

        }

        public void EndSchemas(string schemaName)
        {

        }

        public void StartNamespaces()
        {

        }

        public void EndNamespaces()
        {

        }

        public void StartNamespace(string namespaceName, Dictionary<string, ObjParamInfo> objectParams)
        {
            var enums = objectParams.Values.Where((op) => _swaggerFilterGen.IsEnum(op.DataType)).Select((p) => p.DataType).ToList();
            var modules = objectParams.Values.Where((op) => !_swaggerFilterGen.IsEnum(op.DataType) &&
                                !_swaggerFilterGen.IsPrimitive(op.DataType) &&
                                !_swaggerFilterGen.IsArray(op.DataType)).Select((p) => p.DataType).ToList();
            var arrays = objectParams.Values.Where((op) => _swaggerFilterGen.IsGenericArray(op.DataType)).Select((p) => _swaggerFilterGen.ArraySubType(p.DataType)).ToList();
            var modules2 = arrays.Where((op) => !_swaggerFilterGen.IsEnum(op) &&
                                !_swaggerFilterGen.IsPrimitive(op) &&
                                !_swaggerFilterGen.IsArray(op)).Select((p) => p).ToList();

            modules.AddRange(modules2);


            enums = enums.Distinct().ToList();
            modules = modules.Distinct().ToList();


            _fileWriter.WrtieStartNameSpaceToFile(namespaceName, modules, enums);
        }

        public void EndNamespace(string namespaceName)
        {
            _fileWriter.WrtieEndNameSpaceToFile(namespaceName);
        }

    }
}
