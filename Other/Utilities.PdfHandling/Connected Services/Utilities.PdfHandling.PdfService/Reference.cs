//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Utilities.PdfHandling.PdfService
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FileItem", Namespace="http://schemas.datacontract.org/2004/07/PDFService")]
    internal partial class FileItem : object
    {
        
        private byte[] DataField;
        
        private string FileNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal byte[] Data
        {
            get
            {
                return this.DataField;
            }
            set
            {
                this.DataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal string FileName
        {
            get
            {
                return this.FileNameField;
            }
            set
            {
                this.FileNameField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Utilities.PdfHandling.PdfService.IPdfConvert")]
    internal interface IPdfConvert
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPdfConvert/GetData", ReplyAction="http://tempuri.org/IPdfConvert/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPdfConvert/GetData", ReplyAction="http://tempuri.org/IPdfConvert/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPdfConvert/CombineFilesIntoOnePdf", ReplyAction="http://tempuri.org/IPdfConvert/CombineFilesIntoOnePdfResponse")]
        Utilities.PdfHandling.PdfService.FileItem CombineFilesIntoOnePdf(System.Collections.Generic.List<Utilities.PdfHandling.PdfService.FileItem> files);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPdfConvert/CombineFilesIntoOnePdf", ReplyAction="http://tempuri.org/IPdfConvert/CombineFilesIntoOnePdfResponse")]
        System.Threading.Tasks.Task<Utilities.PdfHandling.PdfService.FileItem> CombineFilesIntoOnePdfAsync(System.Collections.Generic.List<Utilities.PdfHandling.PdfService.FileItem> files);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    internal interface IPdfConvertChannel : Utilities.PdfHandling.PdfService.IPdfConvert, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    internal partial class PdfConvertClient : System.ServiceModel.ClientBase<Utilities.PdfHandling.PdfService.IPdfConvert>, Utilities.PdfHandling.PdfService.IPdfConvert
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public PdfConvertClient() : 
                base(PdfConvertClient.GetDefaultBinding(), PdfConvertClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IPdfConvert.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PdfConvertClient(EndpointConfiguration endpointConfiguration) : 
                base(PdfConvertClient.GetBindingForEndpoint(endpointConfiguration), PdfConvertClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PdfConvertClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(PdfConvertClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PdfConvertClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(PdfConvertClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PdfConvertClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public string GetData(int value)
        {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value)
        {
            return base.Channel.GetDataAsync(value);
        }
        
        public Utilities.PdfHandling.PdfService.FileItem CombineFilesIntoOnePdf(System.Collections.Generic.List<Utilities.PdfHandling.PdfService.FileItem> files)
        {
            return base.Channel.CombineFilesIntoOnePdf(files);
        }
        
        public System.Threading.Tasks.Task<Utilities.PdfHandling.PdfService.FileItem> CombineFilesIntoOnePdfAsync(System.Collections.Generic.List<Utilities.PdfHandling.PdfService.FileItem> files)
        {
            return base.Channel.CombineFilesIntoOnePdfAsync(files);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IPdfConvert))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IPdfConvert))
            {
                return new System.ServiceModel.EndpointAddress("http://uc-activepdf.northcentralus.cloudapp.azure.com/PDFConvert.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return PdfConvertClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IPdfConvert);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return PdfConvertClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IPdfConvert);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IPdfConvert,
        }
    }
}
